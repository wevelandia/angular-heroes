import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';

import { Hero, Publisher } from '../../interfaces/hero.interface';
import { HeroesService } from '../../services/heroes.service';
import { switchMap } from 'rxjs';


@Component({
  selector: 'app-new-page',
  templateUrl: './new-page.component.html',
  styleUrl: './new-page.component.css'
})

export class NewPageComponent implements OnInit {

  // Definimos nuestro Formulario reactivo
  // nonNullable: true: Esto me indica que superhero siempre va a ser un string y los demas campos si pueden ser nulos.
  public heroForm = new FormGroup({
    id: new FormControl<string>(''),
    superhero: new FormControl<string>('', { nonNullable: true }),
    publisher: new FormControl<Publisher>( Publisher.DCComics ),
    alter_ego: new FormControl(''),
    first_appearance: new FormControl(''),
    characters: new FormControl(''),
    alt_img: new FormControl('')
  });

  public publishers = [
    { id: 'DC Comics', desc: 'DC - Comics' },
    { id: 'Marvel Comics', desc: 'Marvel - Comics' },
  ];

  constructor(
    private heroesService: HeroesService,
    private activatedRoute: ActivatedRoute,
    private router: Router
  ) {}

  // Creamos un get para corregir el envio del form por el tipo de datos,
  // this.heroesService.updateHero( this.heroForm.value );  En esta linea sale un mensjae de error es como estar esperando una manzana pero se recibe es una piedra en forma de manzana.
  get currentHero(): Hero {
    const hero = this.heroForm.value as Hero;
    return hero;
  }

  ngOnInit(): void {
    // Cuando se carga debo de validar que url es.
    if ( !this.router.url.includes('edit') ) return;

    this.activatedRoute.params
      .pipe(
        switchMap( ({ id }) => this.heroesService.deleteHeroById( id ) ),
      ).subscribe( hero => {
        // Si no existe hero lo saco de esta pagina
        if ( !hero ) return this.router.navigateByUrl('/');

        // Si existe, pasamos nuestro hero a heroForm
        this.heroForm.reset( hero );
        return;

      });

  }

  onSubmit(): void {
    /* console.log({
      formIsValid: this.heroForm.valid,
      value: this.heroForm.value
    }); */

    if ( this.heroForm.invalid ) return;
    //this.heroesService.updateHero( this.heroForm.value );

    // Si currentHero (tambien se puede tomar heroForm pues ambos estan conectados ) tiene un id es que quiere actualizar, sino lo tiene lo va a crear
    if ( this.currentHero.id ) {
      this.heroesService.updateHero( this.currentHero )
        .subscribe( hero => {
          // TODO: mostrar snackbar
        });

    return;

    }

    // Si no es que quiere crear
    this.heroesService.addHero( this.currentHero )
      .subscribe( hero => {
        // TODO: mostrar snackbar, y navegar a /heroes/edit/ hero.id
      });

  }
}
